{"version":3,"sources":["default.js","mongo.js","check.js","express-formidable.js","comments.js","posts.js","users.js","index.js","signin.js","signout.js","signup.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AFjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AGhUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"allnode.js","sourcesContent":["module.exports = {\r\n  port: 3000,\r\n  session: {\r\n    secret: 'myblog',\r\n    key: 'myblog',\r\n    maxAge: 2592000000\r\n  },\r\n\tmongodb: 'mongodb://admin:wang123abc@47.98.180.227:27017/myblog'\r\n};\r\n","var config = require('config-lite')(__dirname);\nvar Mongolass = require('mongolass');\nvar mongolass = new Mongolass();\nmongolass.connect(config.mongodb);\n\nvar moment = require('moment');\nvar objectIdToTimestamp = require('objectid-to-timestamp');\n\n// 根据 id 生成创建时间 created_at\nmongolass.plugin('addCreatedAt', {\n  afterFind: function (results) {\n    results.forEach(function (item) {\n      item.created_at = moment(objectIdToTimestamp(item._id)).format('YYYY-MM-DD HH:mm');\n    });\n    return results;\n  },\n  afterFindOne: function (result) {\n    if (result) {\n      result.created_at = moment(objectIdToTimestamp(result._id)).format('YYYY-MM-DD HH:mm');\n    }\n    return result;\n  }\n});\n\nexports.User = mongolass.model('User', {\n  name: { type: 'string' },\n  password: { type: 'string' },\n  avatar: { type: 'string' },\n  gender: { type: 'string', enum: ['m', 'f', 'x'] },\n  bio: { type: 'string' }\n});\nexports.User.index({ name: 1 }, { unique: true }).exec();// 根据用户名找到用户，用户名全局唯一\n\nexports.Post = mongolass.model('Post', {\n  author: { type: Mongolass.Types.ObjectId },\n  title: { type: 'string' },\n  content: { type: 'string' },\n  pv: { type: 'number' }\n});\nexports.Post.index({ author: 1, _id: -1 }).exec();// 按创建时间降序查看用户的文章列表\n\n\nexports.Comment = mongolass.model('Comment', {\n  author: { type: Mongolass.Types.ObjectId },\n  content: { type: 'string' },\n  postId: { type: Mongolass.Types.ObjectId }\n});\nexports.Comment.index({ postId: 1, _id: 1 }).exec();// 通过文章 id 获取该文章下所有留言，按留言创建时间升序\nexports.Comment.index({ author: 1, _id: 1 }).exec();// 通过用户 id 和留言 id 删除一个留言\n\n","module.exports = {\n  checkLogin: function checkLogin(req, res, next) {\n    if (!req.session.user) {\n      req.flash('error', '未登录'); \n      return res.redirect('/signin');\n    }\n    next();\n  },\n\n  checkNotLogin: function checkNotLogin(req, res, next) {\n    if (req.session.user) {\n      req.flash('error', '已登录'); \n      return res.redirect('back');//返回之前的页面\n    }\n    next();\n  }\n};\n","'use strict';\r\n\r\nconst formidable = require('formidable');\r\n\r\nfunction parse(opts) {\r\n\r\n    return (req, res, next) => {\r\n        const form = new formidable.IncomingForm();\r\n        Object.assign(form, opts);\r\n        // form.on('error', (err) => {\r\n        //     next(err);\r\n        //     return;\r\n        // });\r\n        form.parse(req, (err, fields, files) => {\r\n            if (err) {\r\n                next(err);\r\n                return;\r\n            }\r\n            Object.assign(req, {fields, files});\r\n            next();\r\n        });\r\n    };\r\n}\r\n\r\nmodule.exports = parse;\r\nexports.parse = parse; // backword compatibility","var marked = require('marked');\nvar Comment = require('../lib/mongo').Comment;\n\n// 将 comment 的 content 从 markdown 转换成 html\nComment.plugin('contentToHtml', {\n  afterFind: function (comments) {\n    return comments.map(function (comment) {\n      comment.content = marked(comment.content);\n      return comment;\n    });\n  }\n});\n\nmodule.exports = {\n  // 创建一个留言\n  create: function create(comment) {\n    return Comment.create(comment).exec();\n  },\n\n  // 通过用户 id 和留言 id 删除一个留言\n  delCommentById: function delCommentById(commentId, author) {\n    return Comment.remove({ author: author, _id: commentId }).exec();\n  },\n\n  // 通过文章 id 删除该文章下所有留言\n  delCommentsByPostId: function delCommentsByPostId(postId) {\n    return Comment.remove({ postId: postId }).exec();\n  },\n\n  // 通过文章 id 获取该文章下所有留言，按留言创建时间升序\n  getComments: function getComments(postId) {\n    return Comment\n      .find({ postId: postId })\n      .populate({ path: 'author', model: 'User' })\n      .sort({ _id: 1 })\n      .addCreatedAt()\n      .contentToHtml()\n      .exec();\n  },\n\n  // 通过文章 id 获取该文章下留言数\n  getCommentsCount: function getCommentsCount(postId) {\n    return Comment.count({ postId: postId }).exec();\n  }\n};\n","var express = require('express');\nvar router = express.Router();\n\nvar PostModel = require('../models/posts');\nvar CommentModel = require('../models/comments');\nvar checkLogin = require('../middlewares/check').checkLogin;\n\n//一些需要转译的字符,有问题\nfunction translationString(s) {\n  return  s.replace(/</g,\"&lt;\")\n      .replace(/>/g,\"&gt;\")\n      .replace(/&/g,\"&amp;\")\n      .replace(/\"/g,\"&quot;\")\n      .replace(/'/g,\"&#x27;\")\n      .replace(/\\//g,\"&#x2f;\");\n\n      // return s.replace(/<script>/g,\"&lt;script&gt;\")\n      //     .replace(/<\\/script>/g,\"&lt;&#x2f;script&gt;\");\n}\n\n// GET /posts 所有用户或者特定用户的文章页\n//   eg: GET /posts?author=xxx\nrouter.get('/', function(req, res, next) {\n  var author = req.query.author;\n  var presize = 0;  // 跳过的文章篇数\n  var pagesize = 10;  //每页文章篇数\n  var page = 1; //当前页\n  var q = null;\n\n  if(req.query.page != null){\n    page = req.query.page;\n    presize = (page-1) * pagesize;\n  }\n\n  if(req.query.query != null){\n    q = req.query.query;\n  }\n\n  //分页查找文章\n  function getPosts(){\n    var p = new Promise(function(resolve,reject){\n      PostModel.getPosts(author,presize,pagesize,q).then(function(posts){\n        resolve(posts);\n      });\n    });\n    return p;\n  }\n\n  //获取所有文章篇数\n  function getPostsCount(){\n    var p = new Promise(function(resolve,reject){\n      PostModel.getPostsCount(author,q).then(function(postsCount){\n        resolve(postsCount);\n      });\n    });\n    return p;\n  }\n\n  //获取浏览最多的前三篇文章\n  function getHotPosts(){\n    var p = new Promise(function(resolve,reject){\n      PostModel.getHotPosts(author).then(function(hotPosts){\n        resolve(hotPosts);\n      });\n    });\n    return p;\n  }\n\n  Promise.all([getPosts(),getPostsCount(),getHotPosts()]).then(function(result){\n          res.render('posts', {\n          posts: result[0],\n          postsCount:result[1],\n          hotPosts:result[2],\n          page:page,\n          author:author\n      });\n  })\n\n  // PostModel.getPosts(author,presize,pagesize,q)\n  //   .then(function (posts) {\n  //     PostModel.getPostsCount()\n  //     .then(function(postsCount){\n  //         res.render('posts', {\n  //         posts: posts,\n  //         postsCount:postsCount,\n  //         page:page\n  //     });\n  //     })\n  //   })\n    .catch(next);\n});\n\n// POST /posts 发表一篇文章\nrouter.post('/', checkLogin, function(req, res, next) {\n  var author = req.session.user._id;\n  var title = req.fields.title;// translationString(req.fields.title);\n  var content = req.fields.content; //translationString(req.fields.content);\n\n  // 校验参数\n  try {\n    if (!title.length) {\n      throw new Error('请填写标题');\n    }\n    if (!content.length) {\n      throw new Error('请填写内容');\n    }\n  } catch (e) {\n    req.flash('error', e.message);\n    return res.redirect('back');\n  }\n\n  var post = {\n    author: author,\n    title: title,\n    content: content,\n    pv: 0\n  };\n\n\n\n  PostModel.create(post)\n    .then(function (result) {\n      // 此 post 是插入 mongodb 后的值，包含 _id\n      post = result.ops[0];\n      req.flash('success', '发表成功');\n      // 发表成功后跳转到该文章页\n      res.redirect(`/posts/${post._id}`);\n    })\n    .catch(next);\n});\n\n// GET /posts/create 发表文章页\nrouter.get('/create', checkLogin, function(req, res, next) {\n  res.render('create');\n});\n\n// GET /posts/track?author=xxx 文章轨迹\nrouter.get('/track', checkLogin, function(req, res, next) {\n  var author = req.query.author;\n  PostModel.getTrackById(author).then(function(data){\n    res.render('track', {\n      tracks: sortByTime(data)\n    });\n  }).catch(next);\n\n\n  //arrs = [{year:'2018',list:[{month:'04',list:[{文章1},{文章2}]}]}]\n  function sortByTime(data) {\n    var arrs = [];\n    data.forEach(function (each) {\n      var year = each.created_at.substr(0,4);\n      var month = transformToUs(each.created_at.substr(5,2));\n      var yearObj;\n      var monthObj;\n      if(arrs.length == 0){\n        yearObj = {year:year,list:[]};\n        monthObj = {month:month,list:[each]};\n        yearObj.list.push(monthObj);\n        arrs.push(yearObj);\n      }else{\n        for(var i=0;i<arrs.length;i++){\n          if(year == arrs[i].year){\n            for(var j=0; j<arrs[i].list.length;j++){\n              if(month == arrs[i].list[j].month){\n                arrs[i].list[j].list.push(each);\n                break;\n              }\n            }\n            //数组里没有这个月的数据，则新增一个\n            if(j == arrs[i].list.length){\n              monthObj = {month:month,list:[each]};\n              arrs[i].list.push(monthObj);\n            }\n            break;\n          }\n        }\n        //数组里没有这年的数据，则新增一个\n        if(i == arrs.length){\n          yearObj = {year:year,list:[]};\n          monthObj = {month:month,list:[each]};\n          yearObj.list.push(monthObj);\n          arrs.push(yearObj);\n        }\n      }\n    });\n    return arrs;\n  }\n\n  function transformToUs(month) {\n    var value;\n    switch (month){\n      case '01': value = 'January';break;\n      case '02': value = 'February';break;\n      case '03': value = 'March';break;\n      case '04': value = 'April';break;\n      case '05': value = 'May';break;\n      case '06': value = 'June';break;\n      case '07': value = 'July';break;\n      case '08': value = 'August';break;\n      case '09': value = 'September';break;\n      case '10': value = 'October';break;\n      case '11': value = 'November';break;\n      case '12': value = 'December';break;\n    }\n  return value;\n  }\n\n});\n\n// GET /posts/:postId 单独一篇的文章页\nrouter.get('/:postId', function(req, res, next) {\n  var postId = req.params.postId;\n\n  Promise.all([\n    PostModel.getPostById(postId),// 获取文章信息\n    CommentModel.getComments(postId),// 获取该文章所有留言   \n    PostModel.incPv(postId)// pv 加 1\n  ])\n  .then(function (result) {\n    var post = result[0];\n    post.title = translationString(post.title);\n    post.content = translationString(post.content);\n    var comments = result[1];\n    if (!post) {\n      throw new Error('该文章不存在');\n    }\n\n    res.render('post', {\n      post: post,\n      comments: comments\n    });\n  })\n  .catch(next);\n});\n\n// GET /posts/:postId/edit 更新文章页\nrouter.get('/:postId/edit', checkLogin, function(req, res, next) {\n  var postId = req.params.postId;\n  var author = req.session.user._id;\n\n  PostModel.getRawPostById(postId)\n    .then(function (post) {\n      if (!post) {\n        throw new Error('该文章不存在');\n      }\n      if (author.toString() !== post.author._id.toString()) {\n        throw new Error('权限不足');\n      }\n      res.render('edit', {\n        post: post\n      });\n    })\n    .catch(next);\n});\n\n// POST /posts/:postId/edit 更新一篇文章\nrouter.post('/:postId/edit', checkLogin, function(req, res, next) {\n  var postId = req.params.postId;\n  var author = req.session.user._id;\n  var title = translationString(req.fields.title);\n  var content = translationString(req.fields.content);\n\n  PostModel.updatePostById(postId, author, { title: title, content: content })\n    .then(function () {\n      req.flash('success', '编辑文章成功');\n      // 编辑成功后跳转到上一页\n      res.redirect(`/posts/${postId}`);\n    })\n    .catch(next);\n});\n\n// GET /posts/:postId/remove 删除一篇文章\nrouter.get('/:postId/remove', checkLogin, function(req, res, next) {\n  var postId = req.params.postId;\n  var author = req.session.user._id;\n\n  PostModel.delPostById(postId, author)\n    .then(function () {\n      req.flash('success', '删除文章成功');\n      // 删除成功后跳转到主页\n      res.redirect('/posts');\n    })\n    .catch(next);\n});\n\n// POST /posts/:postId/comment 创建一条留言\nrouter.post('/:postId/comment', checkLogin, function(req, res, next) {\n  var author = req.session.user._id;\n  var postId = req.params.postId;\n  var content = req.fields.content;\n  var comment = {\n    author: author,\n    postId: postId,\n    content: content\n  };\n\n  CommentModel.create(comment)\n    .then(function () {\n      req.flash('success', '留言成功');\n      // 留言成功后跳转到上一页\n      res.redirect('back');\n    })\n    .catch(next);\n});\n\n// GET /posts/:postId/comment/:commentId/remove 删除一条留言\nrouter.get('/:postId/comment/:commentId/remove', checkLogin, function(req, res, next) {\n  var commentId = req.params.commentId;\n  var author = req.session.user._id;\n\n  CommentModel.delCommentById(commentId, author)\n    .then(function () {\n      req.flash('success', '删除留言成功');\n      // 删除成功后跳转到上一页\n      res.redirect('back');\n    })\n    .catch(next);\n});\n\nmodule.exports = router;\n","var User = require('../lib/mongo').User;\n\nmodule.exports = {\n  // 注册一个用户\n  create: function create(user) {\n    return User.create(user).exec();\n  },\n\n  // 通过用户名获取用户信息\n  getUserByName: function getUserByName(name) {\n    return User\n      .findOne({ name: name })\n      .addCreatedAt()\n      .exec();\n  }\n};\n","module.exports = function (app) {\n  app.get('/', function (req, res) {\n    res.redirect('/posts');\n  });\n  app.use('/signup', require('./signup'));\n  app.use('/signin', require('./signin'));\n  app.use('/signout', require('./signout'));\n  app.use('/posts', require('./posts'));\n  // app.use('/index', require('./indexpage'));\n\n  // 404 page\n  app.use(function (req, res) {\n    if (!res.headersSent) {\n      res.status(404).render('404');\n    }\n  });\n};\n","var sha1 = require('sha1');\nvar express = require('express');\nvar router = express.Router();\n\nvar UserModel = require('../models/users');\nvar checkNotLogin = require('../middlewares/check').checkNotLogin;\n\n// GET /signin 登录页\nrouter.get('/', checkNotLogin, function(req, res, next) {\n  res.render('signin');\n});\n\n// POST /signin 用户登录\nrouter.post('/', checkNotLogin, function(req, res, next) {\n  var name = req.fields.name;\n  var password = req.fields.password;\n\n  UserModel.getUserByName(name)\n    .then(function(user){\n      if(!user){\n        req.flash('error','用户不存在');\n        return res.redirect('back');\n      }\n      //检查密码是否匹配\n      if(sha1(password) !== user.password){\n        req.flash('error','用户名或密码错误');\n        return res.redirect('back');\n      }\n      req.flash('success','登录成功');\n      // 用户信息写入 session\n      delete user.password;\n      req.session.user = user;\n      // 跳转到主页\n      res.redirect('/posts');\n    })\n    .catch(next);\n});\n\nmodule.exports = router;\n","var express = require('express');\nvar router = express.Router();\n\nvar checkLogin = require('../middlewares/check').checkLogin;\n\n// GET /signout 登出\nrouter.get('/', checkLogin, function(req, res, next) {\n   // 清空 session 中用户信息\n  req.session.user = null;\n  req.flash('success', '登出成功');\n  // 登出成功后跳转到主页\n  res.redirect('/posts');\n});\n\nmodule.exports = router;\n","var fs = require('fs');\nvar path = require('path');\nvar sha1 = require('sha1');\nvar express = require('express');\nvar router = express.Router();\n\nvar UserModel = require('../models/users');\nvar checkNotLogin = require('../middlewares/check').checkNotLogin;\n\n// GET /signup 注册页\nrouter.get('/', checkNotLogin, function(req, res, next) {\n  res.render('signup');\n});\n\n// POST /signup 用户注册\nrouter.post('/', checkNotLogin, function(req, res, next) { \n  var name = req.fields.name;\n  var gender = req.fields.gender;\n  var bio = req.fields.bio;\n  var avatar = req.files.avatar.path.split(path.sep).pop();\n  var password = req.fields.password;\n  var repassword = req.fields.repassword;\n\n  // 校验参数\n  try {\n    if (!(name.length >= 1 && name.length <= 10)) {\n      throw new Error('名字请限制在 1-10 个字符');\n    }\n    if (['m', 'f', 'x'].indexOf(gender) === -1) {\n      throw new Error('性别只能是 m、f 或 x');\n    }\n    if (!(bio.length >= 1 && bio.length <= 30)) {\n      throw new Error('个人简介请限制在 1-30 个字符');\n    }\n    if (!req.files.avatar.name) {\n      throw new Error('缺少头像');\n    }\n    if (password.length < 6) {\n      throw new Error('密码至少 6 个字符');\n    }\n    if (password !== repassword) {\n      throw new Error('两次输入密码不一致');\n    }\n  } catch (e) {\n    // 注册失败，异步删除上传的头像\n    fs.unlink(req.files.avatar.path);\n    req.flash('error', e.message);\n    return res.redirect('/signup');\n  }\n\n  // 明文密码加密\n  password = sha1(password);\n\n  // 待写入数据库的用户信息\n  var user = {\n    name: name,\n    password: password,\n    gender: gender,\n    bio: bio,\n    avatar: avatar\n  };\n\n  // 用户信息写入数据库\n  UserModel.create(user)\n    .then(function (result) {\n      // 此 user 是插入 mongodb 后的值，包含 _id\n      user = result.ops[0];\n      // 将用户信息存入 session\n      delete user.password;\n      req.session.user = user;\n      // 写入 flash\n      req.flash('success', '注册成功');\n      // 跳转到首页\n      res.redirect('/posts');\n    })\n    .catch(function (e) {\n      // 注册失败，异步删除上传的头像\n      fs.unlink(req.files.avatar.path);\n      // 用户名被占用则跳回注册页，而不是错误页\n      if (e.message.match('E11000 duplicate key')) {\n        req.flash('error', '用户名已被占用');\n        return res.redirect('/signup');\n      }\n      next(e);\n    });\n\n});\n\nmodule.exports = router;\n"]}